const WizardScene = require("telegraf/scenes/wizard");
const locale = require("../locale");
const escapeHTML = require("escape-html");
const { Markup } = require("telegraf");
const log = require("../helpers/log");
const {
    Settings,
    User,
    Ad,
    Service,
    Profit,
    Country,
    Writer,
    Request,
    Bin,
    Log,
    Mentors
  } = require("../database");

  let mentor_1 = await Mentors.findOne({ 
    where: { 
    id: 1
 } 
})
let mentor_2 = await Mentors.findOne({ 
    where: { 
    id: 2
 } 
})
let mentor_3 = await Mentors.findOne({ 
    where: { 
    id: 3
 } 
})
let mentor_4 = await Mentors.findOne({ 
    where: { 
    id: 4
 } 
})
let mentor_5 = await Mentors.findOne({ 
    where: { 
    id: 5
 } 
})

const scene = new WizardScene(
  "change_mentors_scene",
  async (ctx) => {
    try {
      await ctx.reply(`<i>üìù –í—ã–±–µ—Ä–∏—Ç–µ –∫–∞–∫–æ–≥–æ –Ω–∞—Å—Ç–∞–≤–Ω–∏–∫–∞ –ø–æ–º–µ–Ω—è—Ç—å:</i>`, {
        parse_mode: "HTML",
        reply_markup: Markup.inlineKeyboard([
            [
                Markup.callbackButton(mentor_1.username_mentor  ? `1. ${mentor_1.username_mentor} üë®‚Äçüè´` : `–ø—É—Å—Ç–æ`, "mentor_change_1")
            ],
            [
                Markup.callbackButton(mentor_2.username_mentor ? `2. ${mentor_2.username_mentor} üë®‚Äçüè´` : `–ø—É—Å—Ç–æ`, "mentor_change_2")
            ],
            [
                Markup.callbackButton(mentor_3.username_mentor ? `3. ${mentor_3.username_mentor} üë®‚Äçüè´` : `–ø—É—Å—Ç–æ`, "mentor_change_3")
            ],
            [
                Markup.callbackButton(mentor_4.username_mentor ?`4. ${mentor_4.username_mentor} üë®‚Äçüè´`: `–ø—É—Å—Ç–æ`, "mentor_change_4")
            ],
            [
                Markup.callbackButton(mentor_5.username_mentor ? `5. ${mentor_5.username_mentor} üë®‚Äçüè´`: `–ø—É—Å—Ç–æ`, "mentor_change_5")
            ]
          ]),
      });
      ctx.scene.state.data = {
        username: '',
        desc: '',
        mentor_num: null,
      };
      return ctx.wizard.next();
    } catch (err) {
      ctx.replyOrEdit("‚ùå –û—à–∏–±–∫–∞ –Ω–∞—Ö—É–π").catch((err) => err);
      return ctx.scene.leave();
    }
  },
  async (ctx) => {
    try {
      if(["mentor_change_1"].includes(ctx.callbackQuery.data)) {
        ctx.scene.state.data.mentor_num = 1
        await ctx.reply(`‚úÖ –í—ã –≤—ã–±—Ä–∞–ª–∏ –ø–µ—Ä–≤—É—é –ø–æ–∑–∏—Ü–∏—é –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –Ω–∞—Å—Ç–∞–≤–Ω–∏–∫–∞.\nüë®‚Äçüíª –í–≤–µ–¥–∏—Ç–µ username –Ω–∞—Å—Ç–∞–≤–Ω–∏–∫–∞:`)

    } else if(["mentor_change_2"].includes(ctx.callbackQuery.data)) {

        ctx.scene.state.data.mentor_num = 2
        await ctx.reply(`‚úÖ –í—ã –≤—ã–±—Ä–∞–ª–∏ –≤—Ç–æ—Ä—É—é –ø–æ–∑–∏—Ü–∏—é –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –Ω–∞—Å—Ç–∞–≤–Ω–∏–∫–∞.\nüë®‚Äçüíª –í–≤–µ–¥–∏—Ç–µ username –Ω–∞—Å—Ç–∞–≤–Ω–∏–∫–∞:`)
    } else if(["mentor_change_3"].includes(ctx.callbackQuery.data)) {

        ctx.scene.state.data.mentor_num = 3
        await ctx.reply(`‚úÖ –í—ã –≤—ã–±—Ä–∞–ª–∏ —Ç—Ä–µ—Ç—å—é –ø–æ–∑–∏—Ü–∏—é –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –Ω–∞—Å—Ç–∞–≤–Ω–∏–∫–∞.\nüë®‚Äçüíª –í–≤–µ–¥–∏—Ç–µ username –Ω–∞—Å—Ç–∞–≤–Ω–∏–∫–∞:`)
    } else if(["mentor_change_4"].includes(ctx.callbackQuery.data)) {

        ctx.scene.state.data.mentor_num = 4
        await ctx.reply(`‚úÖ –í—ã –≤—ã–±—Ä–∞–ª–∏ —á–µ—Ç–≤—ë—Ä—Ç—É—é –ø–æ–∑–∏—Ü–∏—é –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –Ω–∞—Å—Ç–∞–≤–Ω–∏–∫–∞.\nüë®‚Äçüíª –í–≤–µ–¥–∏—Ç–µ username –Ω–∞—Å—Ç–∞–≤–Ω–∏–∫–∞:`)
    } else if(["mentor_change_5"].includes(ctx.callbackQuery.data)) {
        ctx.scene.state.data.mentor_num = 5
        await ctx.reply(`‚úÖ –í—ã –≤—ã–±—Ä–∞–ª–∏ –ø—è—Ç—É—é –ø–æ–∑–∏—Ü–∏—é –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –Ω–∞—Å—Ç–∞–≤–Ω–∏–∫–∞.\nüë®‚Äçüíª –í–≤–µ–¥–∏—Ç–µ username –Ω–∞—Å—Ç–∞–≤–Ω–∏–∫–∞:`)
    }
      return ctx.wizard.next();
    } catch (err) {
        console.log(err)
        return ctx.wizard.prevStep();
    }
  },
  async (ctx) => {
    try {
      if (!ctx.message.text) return ctx.wizard.prevStep();
      // const log = await Log.findOne({ where: { id: ctx.scene.state.id } })
      ctx.scene.state.data.username = ctx.message.text;
      await ctx.replyWithHTML(`üìÅ –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –Ω–∞—Å—Ç–∞–≤–Ω–∏–∫–∞:`)
      return ctx.wizard.next();
    } catch (err) {
        console.log(err)
        return ctx.wizard.prevStep();
    }
},
    async (ctx) => {
        try {
          if (!ctx.message.text) return ctx.wizard.prevStep();
          // const log = await Log.findOne({ where: { id: ctx.scene.state.id } })
          await Mentors.update({
              username: ctx.scene.state.data.username,
              description: ctx.scene.state.data.description
          }, {
              where: {
                  id: ctx.scene.state.data.mentor_num
              }
          })
          await ctx.replyWithHTML(`<i>‚úÖ –í—ã —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–∏–ª–∏ –Ω–∞—Å—Ç–∞–≤–Ω–∏–∫–∞.</i>`)
          return ctx.scene.leave();
        } catch (err) {
            console.log(err)
            await ctx.reply(`‚ùå –û—à–∏–±–∫–∞`)
            return ctx.scene.leave()
        }
  },
);

module.exports = scene;
